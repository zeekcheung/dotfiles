// Place your key bindings in this file to override the defaults
[
  // create new file
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  // create new folder
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  // yank file
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  // cut file
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  // paste file
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  // rename file
  {
    "key": "r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  // delete file
  {
    "key": "d",
    "command": "moveFileToTrash",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  // toggle explorer
  {
    "key": "ctrl+e",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  // move line up
  {
    "key": "alt+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // move line down
  {
    "key": "alt+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // go back to editor when explorer is focused
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // go back to editor when search is focused
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "searchViewletVisible && searchViewletFocus"
  },
  // go back to editor when extensions is focused
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "viewContainer.workbench.view.extensions.enabled"
  },
  // go back to editor when terminal is focused
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  // go back to editor when problem filter is focused
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "problemsFilterFocus"
  },
  // go back to editor when comments filter is focused
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "commentsFilterFocus"
  },
  // go back to editor when problems is focused
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "problemsVisibility"
  },
  // next item in quick
  {
    "key": "ctrl+n",
    "command": "workbench.action.quickOpenNavigateNext",
    "when": "inQuickOpen"
  },
  // next suggestion
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // next suggestion
  {
    "key": "ctrl+n",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // previous item in quick open
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenNavigatePrevious",
    "when": "inQuickOpen"
  },
  // previous suggestion
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // previous suggestion
  {
    "key": "ctrl+p",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // better escape
  {
    "command": "vscode-neovim.compositeEscape1",
    "key": "j",
    "when": "neovim.mode == insert && editorTextFocus",
    "args": "j"
  },
  // next diagnostic
  {
    "key": "oem_6 d",
    "command": "editor.action.marker.nextInFiles",
    "when": "editorFocus && (vim.mode == 'Normal' || neovim.mode == normal)"
  },
  // previous diagnostic
  {
    "key": "oem_6 d",
    "command": "editor.action.marker.prevInFiles",
    "when": "editorFocus && (vim.mode == 'Normal' || neovim.mode == normal)"
  },
  // vsplit
  {
    "key": "oem_5",
    "command": "workbench.action.splitEditor",
    "when": "editorFocus && (vim.mode == 'Normal' || neovim.mode == normal)"
  },
  // hsplit
  {
    "key": "shift+oem_5",
    "command": "workbench.action.splitEditorDown",
    "when": "editorFocus && (vim.mode == 'Normal' || neovim.mode == normal)"
  },
  {
    "key": "] ]",
    "command": "editor.action.wordHighlight.next",
    "when": "editorTextFocus && hasWordHighlights"
  },
  {
    "key": "[ [",
    "command": "editor.action.wordHighlight.prev",
    "when": "editorTextFocus && hasWordHighlights"
  }
]
